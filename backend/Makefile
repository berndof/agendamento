# === Vari√°veis de ambiente ===
ENV_FILE_DEV := .env.dev
ENV_FILE_PROD := .env.prod

COMPOSE_DEV := docker compose -f docker-compose.yml -f docker-compose.dev.yml --env-file $(ENV_FILE_DEV)
COMPOSE_WATCH := docker compose -f docker-compose.yml -f docker-compose.watch.yml --env-file $(ENV_FILE_DEV)
COMPOSE_PROD := docker compose -f docker-compose.yml -f docker-compose.prod.yml --env-file $(ENV_FILE_PROD)

# === Targets padr√£o ===
.PHONY: help watch up-services run dev down prod-up logs clean

# === Ajuda ===
help:
	@echo "Targets dispon√≠veis:"
	@echo ""
	@echo "  make watch        ‚Üí Roda o FastAPI em container com watch mode"
	@echo "  make up-services  ‚Üí Sobe somente servi√ßos (Postgres, Redis)"
	@echo "  make run          ‚Üí Sobe servi√ßos e roda FastAPI local"
	@echo "  make dev          ‚Üí Sobe ambiente de desenvolvimento com bind mount do src/ ideal para desenvolver em app/"
	@echo "  make down         ‚Üí Derruba todos os containers do ambiente"
	@echo "  make prod-up      ‚Üí Sobe ambiente de produ√ß√£o com build"
	@echo "  make logs         ‚Üí Mostra logs do container da FastAPI"
	@echo "  make clean        ‚Üí Limpa containers, redes e volumes"

# === Ambiente de Desenvolvimento ===
watch:
	@$(MAKE) down
	@$(COMPOSE_WATCH) build
	@echo "Iniciando Watch Mode ..."
	@$(COMPOSE_WATCH) watch & \
	PID=$$!; \
	sleep 2; \
	docker logs -f chimera_backend; \
	kill $$PID

up-services:
	@$(MAKE) down
	@$(COMPOSE_DEV) up -d postgres redis

run:
	@$(MAKE) up-services
	@./src/scripts/run.sh

dev:
	@$(MAKE) down
	@$(COMPOSE_DEV) up -d


down:
	@echo "Derrubando containers (se existirem)..."
	@docker compose down --remove-orphans || echo "‚ö†Ô∏è  Nenhum container ativo ou erro ignorado."


clean:
	@echo "üßπ Limpando containers, redes e volumes nomeados..."
	@docker compose down --volumes --remove-orphans || echo "‚ö†Ô∏è  Nenhum container ativo."
	@docker volume rm $(docker volume ls -qf dangling=true) 2>/dev/null || true
# === Ambiente de Produ√ß√£o ===

prod-up:
	@$(COMPOSE_PROD) up --build -d

# === Logs ===

logs:
	@docker logs -f chimera_backend
